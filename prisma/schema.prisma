// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid()) @map("_id")
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  certificates   Certificate[]
  AccountDetails AccountDetails[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Certificate Certificate[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Certificate {
  id               String   @id @default(cuid()) @map("_id")
  domain           String   @unique
  email            String
  content          String
  keyAuthorization String
  token            String
  privateKey       String
  csr              String
  status           String
  url              String
  expires          DateTime
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  account          Account  @relation(fields: [accountId], references: [id])
  accountId        String
  orders           Order[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AccountDetails {
  id                       String                 @id @default(cuid()) @map("_id")
  status                   String
  contact                  String[]
  termsOfServiceAgreed     Boolean
  externalAccountBinding   ExternalAccountBinding @relation(fields: [externalAccountBindingId], references: [id])
  orders                   String
  userId                   String
  user                     User                   @relation(fields: [userId], references: [id])
  externalAccountBindingId String
}

model ExternalAccountBinding {
  id             String           @id @default(cuid()) @map("_id")
  payload        String
  protected      String
  signature      String
  AccountDetails AccountDetails[]
}

model Order {
  id            String      @id @default(cuid()) @map("_id")
  status        String
  expires       DateTime
  finalize      String
  url           String
  certificateId String
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
